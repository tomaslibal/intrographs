package eu.libal.intrographs;

import org.junit.Before;
import org.junit.Test;

import java.util.Optional;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;

public class GraphTest {

    Graph<Integer, Edge<Integer>> g;

    @Before
    public void setup() {
        g = new Graph<>();
    }

    @Test
    public void shouldInitWithEmptyVertexSet() {
        assertThat(g.vertexSet().size(), is(0));
    }

    @Test
    public void shouldInitWithEmptyEdgeSet() {
        assertThat(g.edgeSet().size(), is(0));
    }

    @Test
    public void shouldAddVertexWithAutoGeneratedId() {
        g.addVertex(1);

        assertThat(g.vertexSet().size(), is(1));

        Optional<Vertex<Integer>> first = g.vertexSet().stream().findFirst();

        assertThat(first.get().getId().length() > 0, is(true));
    }

    @Test
    public void shouldAddVertexWithSuppliedId() {
        g.addVertex(1, "A");

        Optional<Vertex<Integer>> first = g.vertexSet().stream().findFirst();

        assertThat(first.get().getId(), is("A"));
    }

    @Test
    public void shouldAddSuppliedEdgeObject() {
        Vertex<Integer> v1 = g.addVertex(1);
        Vertex<Integer> v2 = g.addVertex(2);
        Edge<Integer> e1 = new Edge<>(v1, v2);

        g.addEdge(e1);

        assertThat(g.edgeSet().size(), is(1));
        assertThat(g.edgeSet().stream().findFirst().get(), is(e1));
    }

    @Test
    public void shouldAddNewEdgeByVertexId() {
        g.addVertex(1, "A");
        g.addVertex(2, "B");

        g.addEdge("A", "B");

        assertThat(g.edgeSet().size(), is(1));
        assertThat(g.edgeSet().stream().findFirst().get().getSource().getId(), is("A"));
        assertThat(g.edgeSet().stream().findFirst().get().getTarget().getId(), is("B"));
    }
}
