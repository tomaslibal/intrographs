package eu.libal.intrographs.graphs;

import eu.libal.intrographs.graphs.edge.Edge;
import eu.libal.intrographs.graphs.vertex.Vertex;
import org.hamcrest.Matchers;
import org.junit.Before;
import org.junit.Test;
import org.mockito.internal.util.collections.Sets;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;

public class GraphTest {

    Graph<Integer, Edge<Integer>> g;

    @Before
    public void setup() {
        g = new Graph<>();
    }

    @Test
    public void shouldInitWithEmptyVertexSet() {
        assertThat(g.vertexSet().size(), is(0));
    }

    @Test
    public void shouldInitWithEmptyEdgeSet() {
        assertThat(g.edgeSet().size(), is(0));
    }

    @Test
    public void shouldAddVertexWithAutoGeneratedId() {
        g.addVertex(1);

        assertThat(g.vertexSet().size(), is(1));

        Optional<Vertex<Integer>> first = g.vertexSet().stream().findFirst();

        assertThat(first.get().getId(), Matchers.startsWith("id"));
    }

    @Test
    public void shouldAddVertexWithSuppliedId() {
        g.addVertex(1, "A");

        Optional<Vertex<Integer>> first = g.vertexSet().stream().findFirst();

        assertThat(first.get().getId(), is("A"));
    }

    @Test
    public void shouldAddVertexWithSuppliedValue() {
        Vertex<Integer> v = g.addVertex(42);

        assertThat(v.getValue(), is(42));
    }

    @Test
    public void shouldAddBothVerticesToTheirRespectiveAdjacencyLists() {
        Vertex<Integer> s = g.addVertex(1);
        Vertex<Integer> t = g.addVertex(2);

        Edge<Integer> e = new Edge<>(s, t);
        g.addEdge(e);

        assertThat(s.getAdjacentVertices(), Matchers.contains(t));
        assertThat(t.getAdjacentVertices(), Matchers.contains(s));
    }

    @Test
    public void shouldAddSuppliedEdgeObject() {
        Vertex<Integer> v1 = g.addVertex(1);
        Vertex<Integer> v2 = g.addVertex(2);
        Edge<Integer> e1 = new Edge<>(v1, v2);

        g.addEdge(e1);

        assertThat(g.edgeSet().size(), is(1));
        assertThat(g.edgeSet().stream().findFirst().get(), is(e1));
    }

    @Test
    public void shouldAddNewEdgeByVertexId() {
        g.addVertex(1, "A");
        g.addVertex(2, "B");

        g.addEdge("A", "B");

        assertThat(g.edgeSet().size(), is(1));
        assertThat(g.edgeSet().stream().findFirst().get().getSource().getId(), is("A"));
        assertThat(g.edgeSet().stream().findFirst().get().getTarget().getId(), is("B"));
    }

    @Test
    public void shouldGetVertexDegree() {
        g.addVertex(1, "A");
        g.addVertex(1, "B");
        g.addVertex(1, "C");
        g.addVertex(1, "D");
        g.addVertex(1, "E");

        g.addEdge("A", "B");
        g.addEdge("A", "C");
        g.addEdge("A", "D");

        assertThat(g.degreeOf("A"), is(3));
        assertThat(g.degreeOf("D"), is(1));
        assertThat(g.degreeOf("E"), is(0));
    }

    @Test
    public void shouldDispatchVertexAddEvent_WhenVertexAdded() {

        class Notified {
            private boolean not = false;
            public void notifyMe() {
                not = true;
            }
            public boolean hasBeenNotified() {
                return not;
            }
        }

        Notified not = new Notified();

        g.subscribe("graph.vertex.add", message -> {
            not.notifyMe();
        });

        assertThat(not.hasBeenNotified(), is(false));

        g.addVertex(1);

        assertThat(not.hasBeenNotified(), is(true));
    }

    @Test
    public void shouldRemoveVertexByStringId() {
        Vertex<Integer> a = g.addVertex(0, "a");
        Vertex<Integer> b = g.addVertex(1, "b");

        g.removeVertex("a");

        assertThat(g.vertexSet().size(), is(1));
        assertThat(g.vertexSet().contains(a), is(false));
        assertThat(g.vertexSet().contains(b), is(true));
    }

    @Test
    public void shouldRemoveVertex() {
        Vertex<Integer> a = g.addVertex(0, "a");
        Vertex<Integer> b = g.addVertex(1, "b");

        g.removeVertex(a);

        assertThat(g.vertexSet().size(), is(1));
        assertThat(g.vertexSet().contains(a), is(false));
        assertThat(g.vertexSet().contains(b), is(true));
    }

    @Test
    public void shouldRemoveAllVertices() {
        Vertex<Integer> a = g.addVertex(0, "a");
        Vertex<Integer> b = g.addVertex(1, "b");
        Vertex<Integer> c = g.addVertex(2, "c");

        List<Vertex<Integer>> all = Arrays.asList(a, b, c);

        g.removeVertices(all);

        assertThat(g.vertexSet().size(), is(0));
    }

    @Test
    public void shouldRemoveEdge() {
        g.addVertex(0, "a");
        g.addVertex(1, "b");
        Edge<Integer> e = g.addEdge("a", "b");

        assertThat(g.edgeSet().size(), is(1));

        g.removeEdge(e);

        assertThat(g.edgeSet().size(), is(0));
    }

    @Test
    public void shouldRemoveAllEdges() {
        g.addVertex(0, "a");
        g.addVertex(1, "b");
        g.addVertex(2, "c");
        Edge<Integer> e1 = g.addEdge("a", "b");
        Edge<Integer> e2 = g.addEdge("a", "c");

        assertThat(g.edgeSet().size(), is(2));

        List<Edge<Integer>> all = Arrays.asList(e1, e2);

        g.removeEdges(all);

        assertThat(g.edgeSet().size(), is(0));
    }

    @Test
    public void shouldAddEdgeVerticesAsAdjacentVerticesToTheVerticesIncidentOnThatEdge() {
        Vertex<Integer> v = g.addVertex(0, "v");
        Vertex<Integer> w = g.addVertex(1, "w");

        Edge<Integer> e1 = g.addEdge("v", "w");

        assertThat(v.getAdjacentVertices(), is(Sets.newSet(w)));
        assertThat(w.getAdjacentVertices(), is(Sets.newSet(v)));
    }

}
